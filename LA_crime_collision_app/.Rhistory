print(i)
}
for ( i in 1:10)
{
if(i ==3 )
{
next
}
print(i)
}
help(distribution)
help(distribution)
pnorm(0)
pnorm(1)
pnorm(0, mean-2,sd-3)
pnorm(2, mean-2,sd-3)
pnorm(0, mean-2, sd-3)
pnorm(0, 2, 3)
pnorm(2, 2, 3)
pnorm(v)
v <- c(0,3,2)
pnorm(v)
z<- seq(-20,20,by-0.1)
y <-pnorm(x)
plot(x,y)
x<- seq(-20,20,by=0.1)
plot(x,y)
y <-pnorm(x)
plot(x,y)
pnorm(0, lower.tail = FALSE)
pnorm(1, lower.tail = FALSE)
x<-seq(0.50, by=1)
plot(x,y)
y<-dbinom(x, 50 ,0.2)
x<-seq(0.50, by=1)
plot(x,y)
x<-seq(0, 50, by=1)
plot(x,y)
y<-dbinom(x, 50 ,0.2)
plot(x,y)
pbinom(24, 50 , 0.5)
var <- rbinom(100, 100, 0.2)
var <- rbinom(100, 100, 0.2)
var
var <- rbinom(2, 100, 0.2)
var
var <- rbinom(22, 100, 0.2)
var
var <- rbinom(23, 100, 0.2)
var
var <- rbinom(23, 10, 0.2)
var
var <- rbinom(23, 10, 0.5)
var
plot(x,y)
n = 35
xbar = 14.6
mu0 = 15.4
s = 2.5
n = 35
t=(xbar-mu0)/(s/sqrt(n))
t
alpha = 0.05
t.half.alpha = qt(1-alpha/2, df=n-1)
c(-t.half.alpha,t.half.alpha)
qt(0.025, 10)
dnorm(0.05)
dnorm(0.025)
qnorm(0.05)
qnorm(0.025)
x <- rnorm(10)
x
y<- rnorm(10)
y
t.test(x,y)
ttest<- t.test(x,y)
names(ttest)
statistic <- ttest
statistic
statistic <- ttest$statistic
statistic
ts <- replicate(1000, t.test(norm(10),rnorm(10)$statistic))
ts <- replicate(1000, t.test(norm(10),rnorm(10))$statistic)
ts
ts <- replicate(1000, t.test(norm(10),rnorm(10))$statistic)
ts <- replicate(1000, t.test(rnorm(10),rnorm(10))$statistic)
ts
lines(density(ts))
lines(density(ts))
lines(density(ts))
lines(density(ts))
plot.lines(density(ts))
plot(lines(density(ts)))
1+1
print(a)
a = 1
print(a)
print(b)
a = 1
print(a)
b = 2
print(b)
name = "CPM"
name = "CPM"
library("foreign", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
plot(model)
cars
plot(model)
model = lm(speed ~ dist, data = cars)
plot(model)
source('~/.active-rstudio-document')
quit
svm()
library(e1701)
install.packages(c("boot", "cluster", "Matrix", "mgcv", "nlme", "nnet", "survival"))
y <- 3
y
log (4,2)
sin(3.14)
sin(3.141592657)
pi
log (8, 2)
log(10, base = 10)
log(1,1)
log(1,10)
log(2,1)
6/4
6 %% 4
6 %/% 4
class (1)
class ('1')
class (2.0)
class (log)
class (loge)
class (bang)
class (1)
class (0)
class (null)
class (NULL)
class (true)
class (TRUE)
1 = 3
1 == 3
'AD' < 'CD'
'AD' < 'AD'
'AD' < 'AB'
'AD' < 'AF'
6 ! = 3
6 != 3
'2' != 2
'2' == 2
! 3 == 1
1 == 2 && 1 == 3
1 == 1 && 1 == 1
as.integer(5.3)
as.character(5.4)
as.character.Date(4,3,409)
as.character.Date(4)
c(1,2,3,4)
class(c(1,2,3,4))
c("3", 4)
seq(1,5)
seq(1,5, by=3)
seq(1,5, length =)3
seq(1,5, length=3)
seq(1,5, length=4)
rnorm(100)
runif(6)
sample(c(2,4),size=5, replace = TRUE)
sample(c('2',4),size=5, replace = TRUE)
rep(2,5)
rep(c(2,3),5)
rep(c(2,3),r(5,0)
rep(c(2,3),c(5,0))
rep(c(2,3),c(5,0))
rep(c(2,3),c(5,0));
x = 1:100
x
x[c(1,3)]
x[c(1,101)]
x = 1:rnorm(1)
x
x
x
x = 1:rnorm(1)
x
x = 1:rnorm(10)
x = 1:rnorm(1)
x
x
x
x[c(2)]
x[c(T,F)]
x[c(F,T)]
x[c(-2, -5)
x
x[c(-2, -5)]
x[c(-1, -5)]
c
v =10:15
names(v) = c('a','s','s', 'f')
v['s']
v['f']
c(3, 5) + c (5,6,7)
c(3, 5) + c (5,7)
c(2, 3, 5, 6) + 1
c(2, 3, 5, 6) + c(4 ,5)
c(2, 3, 5, 6) + c(4, 5)
c(2, 3, 5, 6) + c(4, 5)
c(2, 3, 5, 6) + c(4, 5, 0, 0)
c(2, 3, 5, 6) + c(4, 5, 0)
c(1,2,3,4) >= c(4,3,2,1)
c(1,2,3,4) > c(4,3,2,1)
c(F, T, F, T) & c(F,T,F,F)
x[x>=2 & x<=3]
x[x>=2 & x<=3]
x[x>=2 & x<4]
x[x>=2 & x<4] # x = c(1,2,3,4,3.5)
x[x>=2 & x<4] # x = c(1,2,3,4,3.5)
x[x>=2 & x<4] # x = c(1,2,3,4)
x = c(1,2,3,4)
x[x>=2 & x<4]
vector = c(1, 12, 17, 19, 100)
vec_max = max(vector)
vec_min = min(vector)
vec_max
vector
vec_min
vector_trimmed = vector[vector < vec_max & vector > vect_min]
vector_trimmed = vector[vector < vec_max & vector > vec_min]
mean(vector_trimmed)
vectpr_trimmed
vector_trimmed
vector > vec_min
vector < vec_max
vector >= vec_max
test = [1,2; 3,4]
test = [1,2, 3,4]
test[1,2, 3,4]
my_mat[1, 1:3]
dim(1:12) = c(4,3)
dim(v) = c(4,3)
v = 1:12
dim(v) = c(4, 3)
v
my_mat[-1, ]
my_mat
my_mat = v
my_mat
my_mat[, 3]
my_mat = matrix(1:12, 4, 3)
ls .
my_mat
my_mat[5, ] = c(1, 2, 3)
rbind(my_mat, c(1, 1, 1))
my_mat
my_mat+1
my_mat+1 -ma_mat
my_mat+1 -my_mat
max(my_may)
max(my_mat)
mean(my_mat)
a = array(1:24, dim = c(3, 4, 2))
a
a = array(1:24, dim = c(3, 4, 2)) +!
1
a+1
a(3, 3, 1)
a[3, 3, 1]
city = c('Seattle', 'Chicago', 'Boston', 'Houston')
temp = c(78, 74, 50, 104)
data = data.frame(city, temp)
data
data = data.frame(city, temp)
data = data.frame(CITY = city, TEMP = temp)
data
colnames(data) = c("city", "temp")
data
help("data.frame")
colnames(data) = c("1", "temp")
data
colnames(data) = c("1", "2")
data
data = data.frame(1 = city, 2 = temp)
data = data.frame(1 = city, 3 = temp)
data = data.frame(x1 = city, y3 = temp)
data
data = data.frame(city,temp, row.names('a', 'b', 'c', 'd'))
data = data.frame(city,temp, row.names = c('a', 'b', 'c', 'd'))
data
data[1,2]
data[1,1]
data[1,]
data[3,]
data[, "city"]
data[, "city", drop =F]
data$city
data$temp
ave = mean(data$temp)
ave
data[data$temp > ave]
data[data$temp > ave,]
data$temp > ave
data[c(T,T,T,F),]
summary(data)
order(data$"nhtemp")
order(data$temp)
data[order(data$temp),
]
write.table(data, file = 'my_data,csv', sep = ',', row.names = F)
setwd("~/")
read.csv('data.csv')
read.csv('my_data.csv')
read.csv('my_data,csv')
write.table(data, file = 'my_data.csv', sep = ',', row.names = F)
read.csv('my_data.csv')
install.packages("openxlsx")
install.packages("foregign")
install.packages("foreign")
employee = list(Nmae = 'John', Position='cashier', Salary=9.50)
employee
v ＝ 1:2
v＝1:4
v = 1:4
sapply(v, sqrt)
gsub('apple', 'strawberry', fruit)
species = iris$Species
species
class(speecies)
class(species)
levels(species)
class(levels()species)
class(levels(species)
;
class(levels(species);
class(levels(species));
ranks = (1,2,3,4)
//
ranks = (1,2,3,4);
rank_dactor = factor (ranls)
rank_dactor = factor (ranls)
rank_dactor = factor(ranks)
rank_dactor = factor(ranks)
x = 1:10
x
f(x,3)
f = cut(x,3)
f
f = cut(x,5)
f
help(cut)
labels = c('A', 'B', 'C')
length_groups = cut(iris$Sepal.Length, thirds, labels = labels)
vec1 = factor (rep(c(0, 1, 3), c(4, 6, 2)))
vec1
levels(vec1) = c("male", "female", "male")
vec1
vec2 = factor(rep(c('b', 'a'), c(4, 6)))
vec2
levels(vec2)
relevel(vec2, ref = 'b')
relevel(vec2, ref = 'a')
relevel(vec2, ref = 'b')
relevel(vec2, ref = 'a')
getwd()
setwd('/user/shuliu/Dropbox/NYC/NYC Data Sci/Homework')
data(mpg)
help(mpg)
?mog
?mpg
library(ggplot2)
?mpg
data(mpg)
g <-ggplot(data = mpg, aes(x = displ, y = hwy))
g + geom_point()
g + geom_point() + geom_smooth(method = 'lm')
g + geom_point(aes(color = class))
g + geom_point(aes(size = class))
g + geom_point(aes(color = class))
g + geom_point(aes(size = class))
g + geom_point(aes(shape = class))
g + geom_point(aes(alpha = class))
#aesthetics
g + geom_point(aes(color = class))
g + geom_point(aes(size = class))
g + geom_point(aes(shape = class))
g + geom_point(aes(alpha = class))
g + geom_point() + facet_grid(. ~ cyl)
g + geom_point() + facet_grid(drv ~ .)
g + geom_point() + facet_grid(drv ~ cyl)
g + geom_point() + facet_grid( ~ class)
g + geom_point() + facet_grid(. ~ cyl)
select(mpg, cyl)
library(dplyr)
select(mpg, cyl)
g + geom_point() + facet_grid(drv ~ .)
g + geom_point() + facet_grid( ~ class)
g + geom_point() + facet_grid(. ~ class)
g + geom_point() + facet_grid(drv ~ cyl)
g + geom_point() + facet_grid( ~ class)
g + geom_point() + facet_grid( ~ wrap)
g + geom_point() + facet_wrap( ~ class)
g + geom_point() + facet_wrap(. ~ class)
g + geom_point() + geom_smooth() #turn off confidence band
g + geom_point() + geom_smooth((se = FALSE)) #se -- turn off confidence band
g + geom_point() + geom_smooth((se = FALSE)) #se -- turn off confidence band
g + geom_point() + geom_smooth(se = FALSE) #se -- turn off confidence band
ggplot(data = mpg, aes(x = class, hwy)) + geom_point())
ggplot(data = mpg, aes(x = class, hwy)) + geom_point()
g + geom_boxplot()
g <- (data = mpg, aes(x = class, y = hwy))
g + geom_boxplot()
g <- ggplot(data = mpg, aes(x = class, y = hwy))
g + geom_boxplot()
g <- ggplot(data = mpg, aes(x = reorder(class, hwy), y = hwy))
g + geom_boxplot()
g <- ggplot(data = mpg, aes(x = reorder(class, hwy, median, y = hwy))
g <- ggplot(data = mpg, aes(x = reorder(class, hwy, median, y = hwy))
g + geom_boxplot()
g <- ggplot(data = mpg, aes(x = reorder(class, hwy, median, y = hwy))
g + geom_boxplot()
g + geom_boxplot()
g <- ggplot(data = mpg, aes(x = reorder(class, hwy, median), y = hwy))
g + geom_boxplot()
install.packages("knitr")
knitr::opts_chunk$set(echo = TRUE)
output: html_document
plot(pressure)
```{r pressure, echo=TRUE}
```{r pressure, echo=TRUE}
source('~/Dropbox/NYC/NYC Data Sci/Lecture Notes/R Language/R_ggplot_1_07-12.R')
shiny::runApp('Dropbox/NYC/NYC Data Sci/Projects/Project2-Shiny/LAcrime_app')
dttable_df <- dttable_df[drop = FALSE]
shiny::runApp('Dropbox/NYC/NYC Data Sci/Projects/Project2-Shiny/LAcrime_app')
runApp('Dropbox/NYC/NYC Data Sci/Projects/Project2-Shiny/LAcrime_app')
runApp('Dropbox/NYC/NYC Data Sci/Projects/Project2-Shiny/LAcrime_app')
runApp('Dropbox/NYC/NYC Data Sci/Projects/Project2-Shiny/LAcrime_app')
shiny::runApp('Desktop/Projects/Project2-Shiny/LA_crime_collision_app')
runApp('Desktop/Projects/Project2-Shiny/LA_crime_collision_app')
View(crimedf)
View(crimedf)
crimedf = crm_cln_df[crm_cln_df$Year_occ != 2015,]
View(crimedf)
runApp('Desktop/Projects/Project2-Shiny/LA_crime_collision_app')
runApp('Desktop/Projects/Project2-Shiny/LA_crime_collision_app')
runApp('Desktop/Projects/Project2-Shiny/LA_crime_collision_app')
runApp('Desktop/Projects/Project2-Shiny/LA_crime_collision_app')
runApp('Desktop/Projects/Project2-Shiny/LA_crime_collision_app')
runApp('Desktop/Projects/Project2-Shiny/LA_crime_collision_app')
runApp('Desktop/Projects/Project2-Shiny/LA_crime_collision_app')
runApp('Desktop/Projects/Project2-Shiny/LA_crime_collision_app')
runApp('Desktop/Projects/Project2-Shiny/LA_crime_collision_app')
runApp('Desktop/Projects/Project2-Shiny/LA_crime_collision_app')
runApp('Desktop/Projects/Project2-Shiny/LA_crime_collision_app')
runApp('Desktop/Projects/Project2-Shiny/LA_crime_collision_app')
runApp('Desktop/Projects/Project2-Shiny/LA_crime_collision_app')
runApp('Desktop/Projects/Project2-Shiny/LA_crime_collision_app')
runApp('Desktop/Projects/Project2-Shiny/LA_crime_collision_app')
runApp('Desktop/Projects/Project2-Shiny/LA_crime_collision_app')
runApp('Desktop/Projects/Project2-Shiny/LA_crime_collision_app')
runApp('Desktop/Projects/Project2-Shiny/LA_crime_collision_app')
runApp('Desktop/Projects/Project2-Shiny/LA_crime_collision_app')
runApp('Desktop/Projects/Project2-Shiny/LA_crime_collision_app')
runApp('Desktop/Projects/Project2-Shiny/LA_crime_collision_app')
runApp('Desktop/Projects/Project2-Shiny/LA_crime_collision_app')
runApp('Desktop/Projects/Project2-Shiny/LA_crime_collision_app')
runApp('Desktop/Projects/Project2-Shiny/LA_crime_collision_app')
runApp('Desktop/Projects/Project2-Shiny/LA_crime_collision_app')
runApp('Desktop/Projects/Project2-Shiny/LA_crime_collision_app')
runApp('Desktop/Projects/Project2-Shiny/LA_crime_collision_app')
plot(cars)
load(iris)
load(iris)
loaddata(iris)
data(iris)
head(iris, 4)
summary(crimedf)
colnames(crimedf)
colnames[DATE.OCC,]
crimedf[DATE.OCC,]
crimedf['DATE.OCC']
head(colnames[DATE.OCC,])
head(colnames['DATE.OCC'])
head(crimedf['DATE.OCC'])
head(crimedf['DATE.OCC'])
head(crimedf['DATE.OCC'], 10)
head(crimedf['DATE.OCC', ])
head(crimedf['DATE.OCC', 1:4])
head(crimedf['DATE.OCC', ], 10)
head(crimedf['DATE.OCC', ], 12)
head(crimedf[, 'DATE.OCC'])
head(crimedf[, 'DATE.OCC'], 20)
head(crimedf[, 'DATE.OCC'], 20)
crimedf %>% group_by(DATE.OCC)
x <- crimedf %>% group_by(DATE.OCC)
x <- crimedf %>% group_by(DATE.OCC)
x <- crimedf %>% group_by(DATE.OCC)
library(dplyr)
x <- crimedf %>% group_by(DATE.OCC)
x
crm_sen_tm_df
shiny::runApp('Desktop/nycdatascience/Github /LA_crime_collision_RShiny/LA_crime_collision_app')
library(rsconnect)
rsconnect::setAccountInfo(name='shuliu',
token='F30E417370D5C5CDE123182A6265FDDE',
secret='8uk8rGJ/UsyW0Gjls4g/tmaEk++sz7qS9++C1EEE')
deployApp()
deployApp()
setwd("~/Desktop/nycdatascience/Github /LA_crime_collision_RShiny")
deployApp()
setwd("~/Desktop/nycdatascience/Github /LA_crime_collision_RShiny/LA_crime_collision_app")
deployApp()
